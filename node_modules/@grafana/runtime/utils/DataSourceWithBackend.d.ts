import { DataSourceApi, DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings, DataQuery, DataSourceJsonData } from '@grafana/data';
import { Observable } from 'rxjs';
/**
 * Describes the current healt status of a data source plugin.
 *
 * @public
 */
export declare enum HealthStatus {
    Unknown = "UNKNOWN",
    OK = "OK",
    Error = "ERROR"
}
/**
 * Describes the payload returned when checking the health of a data source
 * plugin.
 *
 * @public
 */
export interface HealthCheckResult {
    status: HealthStatus;
    message: string;
    details?: Record<string, any>;
}
/**
 * Extend this class to implement a data source plugin that is depending on the Grafana
 * backend API.
 *
 * @public
 */
export declare class DataSourceWithBackend<TQuery extends DataQuery = DataQuery, TOptions extends DataSourceJsonData = DataSourceJsonData> extends DataSourceApi<TQuery, TOptions> {
    constructor(instanceSettings: DataSourceInstanceSettings<TOptions>);
    /**
     * Ideally final -- any other implementation may not work as expected
     */
    query(request: DataQueryRequest): Observable<DataQueryResponse>;
    /**
     * Override to apply template variables
     *
     * @virtual
     */
    applyTemplateVariables(query: DataQuery): DataQuery;
    /**
     * Make a GET request to the datasource resource path
     */
    getResource(path: string, params?: any): Promise<any>;
    /**
     * Send a POST request to the datasource resource path
     */
    postResource(path: string, body?: any): Promise<any>;
    /**
     * Run the datasource healthcheck
     */
    callHealthCheck(): Promise<HealthCheckResult>;
    /**
     * Checks the plugin health
     */
    testDatasource(): Promise<any>;
}
